[ { "title": "üî• macOS (CheatSheet)", "url": "/posts/readme-macos/", "categories": "Apple, macOS", "tags": "macOS, Apple", "date": "2022-02-24 00:00:00 +0100", "snippet": "How to use ?Enable in Security / Confidentiality the Install From everywhere Buttonsudo spctl --master-disableShow Hidden Filesdefaults write com.apple.finder AppleShowAllFiles -boolean true; killall FinderHide Hidden Filesdefaults write com.apple.finder AppleShowAllFiles -boolean true; killall FinderDisplay IP Adressifconfig | grep &quot;inet &quot; | grep -v 127.0.0.1 | cut -d\\ -f2Flush DNSdscacheutil -flushcachesudo killall -HUP mDNSResponderRun Software Updatessoftwareupdate --all --install --force # add this flag to restart computer after installing updates : --restart## If the above command showed no updatesudo rm -rf /Library/Developer/CommandLineToolssudo xcode-select --installUsefull Symboles‚åò is the Command (Ô£ø) key.‚åÉ is the Control key.‚å• is the Option (alt) key.‚áß is the Shift key.‚á™ is the Caps Lock key.üî• macOS Apple Store CLI MASInstall toolsbrew install masSearchmas search SparkDownloadmas install &amp;lt;ByID&amp;gt;üî• macOS DownloaderThis command will allow you to download any macOS installer App ! Just name a version and you are good to go.Versions can be found here : MacOS_version_historyList available installerssoftwareupdate --list-full-installersUpgrade command (Only)MACOS_VERSION=&quot;12.1&quot; # for Montereysoftwareupdate --fetch-full-installer --full-installer-version $MACOS_VERSIONMake a Bootable IMGsudo /Applications/Install\\ macOS\\ Catalina.app/Contents/Resources/createinstallmedia --volume /Volumes/UNTITLED --nointeractionDownload all versions... # on ProgressEnjoy :)" }, { "title": "‚≠ê Setup Fastlane + TestFlight + AppCenter for Android/iOS &amp; Flutter", "url": "/posts/readme-fastlane-appcenter-flutter/", "categories": "Mobile", "tags": "Android, iOS, Flutter", "date": "2022-02-24 00:00:00 +0100", "snippet": "AppCenter data for FastlaneFor example in this url : https://appcenter.ms/orgs/ToTo/applications owner_name : ToTo app_name: Your AppName app_platform: iOS (Obj-c/swift) / Android (Java) api_token: Go to https://appcenter.ms/orgs/YOUR_ORG/apps/YOUR_APP_NAME/settings/apitokens &amp;amp; generate one !You are ready !iOSGenerate necessary stuff in Apple Developer PortalGenerate AppId Go to Identifiers Select : AppIds Select Type : App Fill Description : AppName Fill Bundle ID : (ex. com.example.toto) Choose App Capabilities (can be edited after) Then click RegisterGenerate Distribution Certificat Go to Certificates Choose : iOS Distribution (App Store and Ad Hoc) Optionnal : Generate a CSR Choose the generated CSR Click Validate Click download to download certificat Double click on the certificate to install it on your machineGenerate Provisionning Profile Go to Profiles Choose : AppStore Select AppId : (ex. com.example.toto) Choose distribution certificate Fill Provisionning Profile Name : (ex. toto-prod-pp)Install FastlaneIf you never used Bundler install it firstgem install bundlerthen :bundle install fastlane init# choose 2 for testflight setupThis will create folder fastlane with : Fastfile AppfileSetup file Fastfile : (in fastlane dir)default_platform(:ios)platform :ios do desc &quot;Build &amp;amp; Deploy to TestFlight&quot; lane :public do |options| ## Update pubspec.yaml ## Work 50% of the time !!! # Update Info plist Version # increment_version_number( # version_number: options[:version] # Set a specific version number # ) ## Work 50% of the time !!! # auto increment buildNumber # build_number = number_of_commits(all: true) # increment_build_number(build_number: build_number) # run this : chmod +x ./scripts/upgrade_buildNumber.sh sh(&quot;../scripts/upgrade_buildNumber.sh&quot;, options[:version]) # Update Info plist Bundle ID update_app_identifier( xcodeproj: &quot;Test.xcodeproj&quot;, # Optional path to xcodeproj, will use the first .xcodeproj if not set plist_path: &quot;./Test/Info.plist&quot;, # Path to info plist file, relative to xcodeproj app_identifier: ENV[&quot;APP_ID&quot;] # The App Identifier ) # Update Info plist AppName update_info_plist( # Change the Display Name of your app plist_path: &quot;./Test/Info.plist&quot;, display_name: ENV[&quot;APP_NAME&quot;] ) # download and use certificate match(type: &quot;appstore&quot;, readonly: is_ci) # Use gym to archive your app gym( silent: true, output_directory: &quot;./fastlane/builds&quot;, scheme: ENV[&quot;SCHEME&quot;] ) # Use pilot to upload your app to testflight pilot( app_identifier: ENV[&quot;APP_ID&quot;], distribute_external: false, ) end desc &quot;Build &amp;amp; Zip for Private Store&quot; lane :private do |options| ## some cleanup sh &quot;rm -rf builds/**.zip&quot; ## Update pubspec.yaml ## Work 50% of the time !!! # Update Info plist Version # increment_version_number( # version_number: options[:version] # Set a specific version number # ) ## Work 50% of the time !!! # auto increment buildNumber # build_number = number_of_commits(all: true) # increment_build_number(build_number: build_number) # run this : chmod +x ./scripts/upgrade_buildNumber.sh sh(&quot;../scripts/upgrade_buildNumber.sh&quot;, options[:version]) # Update Info plist Bundle ID update_app_identifier( xcodeproj: &quot;Test.xcodeproj&quot;, # Optional path to xcodeproj, will use the first .xcodeproj if not set plist_path: &quot;./Test/Info.plist&quot;, # Path to info plist file, relative to xcodeproj app_identifier: ENV[&quot;APP_ID&quot;] # The App Identifier ) # Update Info plist AppName update_info_plist( # Change the Display Name of your app plist_path: &quot;./Test/Info.plist&quot;, display_name: ENV[&quot;APP_NAME&quot;] ) # Build Archive xcodebuild( archive: true, archive_path: &quot;./fastlane/builds/Test.xcarchive&quot;, scheme: ENV[&quot;SCHEME&quot;], workspace: &quot;Test.xcworkspace&quot;, build_settings: { &quot;CODE_SIGNING_REQUIRED&quot; =&amp;gt; &quot;NO&quot;, &quot;CODE_SIGN_IDENTITY&quot; =&amp;gt; &quot;&quot;, &quot;CODE_SIGN_ENTITLEMENTS&quot; =&amp;gt; &quot;&quot;, &quot;CODE_SIGNING_ALLOWED&quot; =&amp;gt; &quot;NO&quot; } ) # Clean Archive sh &quot;rm -rf builds/Test.xcarchive/dSYMs/&quot; sh &quot;rm -rf builds/Test.xcarchive/SwiftSupport/&quot; # Zip Archive zip( path: &quot;./fastlane/builds/Test.xcarchive&quot;, output_path: &quot;./fastlane/builds/test-&quot;+ options[:version] +&quot;.xcarchive.zip&quot; ) end desc &quot;AppCenter Upload&quot; lane :appcenter do |options| appcenter_upload( api_token: &quot;&quot;, # found in settings of user owner_name: &quot;&quot;, # found in the url : https://appcenter.ms/orgs/&amp;lt;owner_name&amp;gt;/applications owner_type: &quot;organization&quot;, # Default is user - set to organization for appcenter organizations app_name: options[:app_name], # your app name file: &quot;./fastlane/app-release.ipa&quot;, notify_testers: true # Set to false if you don&#39;t want to notify testers of your new release (default: `false`) ) endendAdd script : upgrade_buildNumber (in iOS rootDir scripts folder)#!/bin/bash# Info Plist pathPATH_TO_INFOPLIST=&quot;YOUR_PATH&quot;INFOPLIST=$PATH_TO_INFOPLIST&quot;/Info.plist&quot;# Type a script or drag a script file from your workspace to insert its path.buildNumber=$(git rev-list HEAD | wc -l | tr -d &#39; &#39;)# Updrage BuildNumber with git build Numbeoldversion=`/usr/libexec/PlistBuddy -c &quot;Print :CFBundleVersion&quot; &quot;$INFOPLIST&quot;`## Works 100% : Change BuildNumberif [ &quot;$buildNumber&quot; != &quot;$oldversion&quot; ] ; then /usr/libexec/PlistBuddy -c &quot;Set :CFBundleVersion $buildNumber&quot; &quot;$INFOPLIST&quot;fi## Change Version /usr/libexec/PlistBuddy -c &quot;Set :CFBundleShortVersionString $1&quot; &quot;$INFOPLIST&quot;Setup file : Appfile (in fastlane dir)# The bundle identifier of your appapp_identifier &quot;com.exemple.toto&quot;# Apple Developer Accountapple_dev_portal_id &quot;titi@toto.com&quot;# App Store Connect Accountitunes_connect_id &quot;titi@toto.com&quot;# Developer Portal Team ID## is found in the url : https://developer.apple.com/account/#/membership/&amp;lt;team_id&amp;gt;team_id &quot;&quot;# App Store Connect Team ID## Check Step &quot;Get itc_team_id&quot;itc_team_id &quot;&quot;# Env for PilotENV[&quot;FASTLANE_USER&quot;] = &quot;titi@toto.com&quot;ENV[&quot;FASTLANE_ITC_TEAM_ID&quot;] = &quot;&amp;lt;itc_team_id&amp;gt;&quot;## To setup 2 factor Auth for delivery# Check Step &quot;Get the FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD&quot; ENV[&quot;FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD&quot;] = &quot;&quot;# Specify the Trusted phone number to automatize sms verification step ## https://github.com/fastlane/fastlane/blob/master/spaceship/docs/Authentication.md#auto-select-sms-via-spaceship_2fa_sms_default_phone_number### Go here and add your phone number as trusted phone, then fill the field : https://appleid.apple.com/ENV[&quot;SPACESHIP_2FA_SMS_DEFAULT_PHONE_NUMBER&quot;] = &quot;&quot;Get itc_team_id$ irbirb&amp;gt; require &quot;spaceship&quot;irb&amp;gt; Spaceship::Tunes.login(&quot;iTunesConnect_username&quot;, &quot;iTunesConnect_password&quot;)irb&amp;gt; Spaceship::Tunes.select_teamDon‚Äôt forget to replace : iTunesConnect_username iTunesConnect_passwordThe result contains the itc_team_idGet the FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD Connect to AppleId Go to Security -&amp;gt; Generate Password for App -&amp;gt; set AppName -&amp;gt; copy the generated code ‚Äú‚Ä¶.-‚Ä¶.-‚Ä¶.-‚Ä¶.‚Äù This code is the FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORDSetup file : Matchfile (in fastlane dir)# To Replace : .git storage for the certificate shared with hole teamgit_url(&quot;https://toto/titi/tata.git&quot;)storage_mode(&quot;git&quot;)# The default type, can be: appstore, adhoc, enterprise or developmenttype(&quot;development&quot;)# Your Apple Developer Portal usernameusername(&quot;toto@tata.com&quot;)Setup file : Pluginfile (in fastlane dir)gem &#39;fastlane-plugin-appcenter&#39;Setup file : Gemfile (in ios rootDir)source &quot;https://rubygems.org&quot;gem &quot;fastlane&quot;plugins_path = File.join(File.dirname(__FILE__), &#39;fastlane&#39;, &#39;Pluginfile&#39;)eval_gemfile(plugins_path) if File.exist?(plugins_path)Add file .env.environement : (in fastlane dir) (ex. .env.dev for dev) SCHEME=&quot;test-dev&quot;APP_ID=&quot;fr.exemple.test&quot;APP_NAME=&quot;Test DEV&quot; How to Build &amp;amp; Deliver to Tesflight ?fastlane ios public version:&quot;1.0.0&quot; --env &quot;dev&quot; # ex. for devAndroidInstall Fastlanefastlane init# choose 2 for testflight setupThis will create folder fastlane with : Fastfile AppfileSetup file : Fastfile (in fastlane dir)default_platform(:android)platform :android do desc &quot;Deploy a new version to the Google Play&quot; lane :deploy do |options| flutter_build ## To use this u need to generate : api.json ! ## Check the Appfile upload_to_play_store(track: &#39;beta&#39;) end desc &quot;Deploy a new version to AppCenter&quot; lane :appcenter_bad do |options| flutter_build appcenter end desc &quot;Build with fastlane with auto upgrade VersionCode&quot; lane :flutter_build do # Return the number of commits in current git branch build_number = number_of_commits() Dir.chdir &quot;..&quot; do sh(&quot;flutter&quot;, &quot;packages&quot;, &quot;get&quot;) sh(&quot;flutter&quot;, &quot;clean&quot;) # sh(&quot;flutter&quot;, &quot;build&quot;, &quot;apk&quot;, &quot;--build-number=#{build_number}&quot;) # sh(&quot;flutter&quot;, &quot;build&quot;, &quot;appbundle&quot;, &quot;--build-number=#{build_number}&quot;) ## TODO : Build for different BuildTypes ! sh(&quot;flutter&quot;, &quot;build&quot;, &quot;apk&quot;, &quot;--release&quot;) end end desc &quot;AppCenter Upload&quot; lane :appcenter do |options| appcenter_upload( api_token: &quot;&quot;, # set api Token from appcenter owner_name: &quot;&quot;, # Set App owner name owner_type: &quot;organization&quot;, # Default is user - set to organization for appcenter organizations app_name: &quot;&quot;, # your app name file: &quot;../build/app/outputs/flutter-apk/app-release.apk&quot;, notify_testers: true, app_platform: &#39;Java&#39;, destinations: &quot;&quot;, # Distribution group destination_type: &quot;group&quot; ) end endSetup file : Appfile (in fastlane dir)json_key_file(&quot;&quot;) # Path to the json secret file - Follow https://docs.fastlane.tools/actions/supply/#setup to get onepackage_name(&quot;com.krausefx.app&quot;) # e.g. Setup file : Pluginfile (in fastlane dir)gem &#39;fastlane-plugin-appcenter&#39;Setup file : Gemfile (in android rootDir)source &quot;https://rubygems.org&quot;gem &quot;fastlane&quot;plugins_path = File.join(File.dirname(__FILE__), &#39;fastlane&#39;, &#39;Pluginfile&#39;)eval_gemfile(plugins_path) if File.exist?(plugins_path)How to Build &amp;amp; Deliver to AppCenter ?## To upgrade the version edit pubspec.yamlfastlane android appcenter_bad.gitignoreiOS .gitignore*.mode1v3*.mode2v3*.moved-aside*.pbxuser*.perspectivev3**/*sync/.sconsign.dblite.tags***/.vagrant/**/DerivedData/Icon?**/Pods/**/.symlinks/profilexcuserdata**/.generated/Flutter/App.frameworkFlutter/Flutter.frameworkFlutter/Flutter.podspecFlutter/Generated.xcconfigFlutter/app.flxFlutter/app.zipFlutter/flutter_assets/Flutter/flutter_export_environment.shServiceDefinitions.jsonRunner/GeneratedPluginRegistrant.*# Exceptions to above rules.!default.mode1v3!default.mode2v3!default.pbxuser!default.perspectivev3.DS_Store.Trashes*.swp*.lock*~.nibbuildArchive/DerivedData/build/*.pbxuser*.mode1v3*.mode2v3*.perspectivev3!default.pbxuser!default.mode1v3!default.mode2v3!default.perspectivev3*.hmap*.ipa*.dSYM.zip*.dSYMtimeline.xctimelineplayground.xcworkspace*.xccheckoutxcuserdata/*.moved-aside.build/Pods/Carthage/CheckoutsCarthage/Buildfastlane/report.xmlfastlane/Preview.htmlfastlane/screenshots/**fastlane/screenshots/**/*.pngfastlane/test_output*.mobileprovision*.cerfastlane/*.cerfastlane/*.mobileprovisionfastlane/builds/**.history/***.p12*.certSigningRequest*.pdfMocks/****/android/.gradle**/android/captures/**/android/local.properties**/android/**/GeneratedPluginRegistrant.javaAndroid .gitignoregradle-wrapper.jar/.gradle/captures//gradlew/gradlew.bat/local.propertiesGeneratedPluginRegistrant.javaFlutter RootProj .gitignore# Miscellaneous*.class*.lock*.log*.pyc*.swp.DS_Store.atom/.buildlog/.history.svn/# IntelliJ related*.iml*.ipr*.iws.idea/# Visual Studio Code related.classpath.project.settings/# .vscode/# Flutter repo-specific/bin/cache//bin/mingit//dev/benchmarks/mega_gallery//dev/bots/.recipe_deps/dev/bots/android_tools//dev/docs/doc//dev/docs/flutter.docs.zip/dev/docs/lib//dev/docs/pubspec.yaml/dev/integration_tests/**/xcuserdata/dev/integration_tests/**/Pods/packages/flutter/coverage/version# packages file containing multi-root paths.packages.generated# Flutter/Dart/Pub related**/doc/api/.dart_tool/.flutter-plugins.flutter-plugins-dependencies.packages.pub-cache/.pub/build/flutter_*.pnglinked_*.dsunlinked.dsunlinked_spec.ds# Android related**/android/**/gradle-wrapper.jar**/android/.gradle**/android/captures/**/android/gradlew**/android/gradlew.bat**/android/local.properties**/android/**/GeneratedPluginRegistrant.java**/android/key.properties*.jks# iOS/XCode related**/ios/**/*.mode1v3**/ios/**/*.mode2v3**/ios/**/*.moved-aside**/ios/**/*.pbxuser**/ios/**/*.perspectivev3**/ios/**/*sync/**/ios/**/.sconsign.dblite**/ios/**/.tags***/ios/**/.vagrant/**/ios/**/DerivedData/**/ios/**/Icon?**/ios/**/Pods/**/ios/**/.symlinks/**/ios/**/profile**/ios/**/xcuserdata**/ios/.generated/**/ios/Flutter/App.framework**/ios/Flutter/Flutter.framework**/ios/Flutter/Flutter.podspec**/ios/Flutter/Generated.xcconfig**/ios/Flutter/app.flx**/ios/Flutter/app.zip**/ios/Flutter/flutter_assets/**/ios/Flutter/flutter_export_environment.sh**/ios/ServiceDefinitions.json**/ios/Runner/GeneratedPluginRegistrant.*# macOS**/macos/Flutter/GeneratedPluginRegistrant.swift**/macos/Flutter/Flutter-Debug.xcconfig**/macos/Flutter/Flutter-Release.xcconfig**/macos/Flutter/Flutter-Profile.xcconfig# Coveragecoverage/# Symbolsapp.*.symbols# Exceptions to above rules.!**/ios/**/default.mode1v3!**/ios/**/default.mode2v3!**/ios/**/default.pbxuser!**/ios/**/default.perspectivev3!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages!/dev/ci/**/Gemfile.lockdoc/*.idea/*#.env*More Infos : Apple Program Roles AppStoreConnect DeveloperPortal" }, { "title": "‚≠ê Setup Mobile Development Environment (Tested on macOS M1+Intel)", "url": "/posts/Setup-mobile-environment/", "categories": "Mobile", "tags": "Android, iOS, Flutter", "date": "2022-02-23 12:00:00 +0100", "snippet": "Install HomeBrew## Install xcode utilsxcode-select --install## Install Brew/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;## Check that everything is Okbrew doctor## To update HomeBrewbrew updateTo update/upgrade a brew package just run :brew reinstall PACKAGE_NAMEAdd HomeBrew to Your PathHBP=`brew --prefix`export PATH=$HBP/bin:$PATHApple M1 SupportAdd this alias to .zshrcalias brew=&quot;arch -arm64 brew&quot;Install ZSHsh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;üîÜ Configure Zsh in a clever wayClone the following repository and follow the described steps zshconfig(The above tool is fully automated and available for Intel &amp;amp; M1 Mac)Install PowerLvl Template + Zsh Plugins Powerlevel9k Powerlevel10k (Recommended)## Install Power10k :git clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k### change ZSH_THEME to : ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;### then run :p10k configure## Or## Install Power9k :git clone https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k### change them in .zshrc : ZSH_THEME=&quot;powerlevel9k/powerlevel9k&quot;## Install Auto-Suggestion :git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions### Edit .zshrc &amp;amp; add in plugins array : plugins=(zsh-autosuggestions)## Install Syntaxe Hylight :brew install zsh-syntax-highlighting## Copy/Paste in .zshrc before rvm Config : source `brew --prefix`/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh &amp;gt;&amp;gt; /Users/$(whoami)/.zshrc## Install Completion : git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions### Edit .zshrc &amp;amp; add in plugins : plugins=(zsh-autosuggestions)Don‚Äôt forget to import Meslo Font into iTerm -&amp;gt; Preferences -&amp;gt; Profiles -&amp;gt; ‚ÄúSelected Profile‚Äù -&amp;gt; Text -&amp;gt; Font -&amp;gt; Select the Meslo font you want to use.Install Gitbrew install gitbrew install git-lfsInstall Git Flowbrew install git-flowInstall Sublime Textbrew install --cask sublime-textInstall Fork (Recommended)brew install --cask forkInstall iTermbrew install --cask iterm2Install PowerLine Fonts for iTerm (Optionnal) :# clonegit clone https://github.com/powerline/fonts.git --depth=1# installcd fonts &amp;amp;&amp;amp; ./install.sh# clean-up a bitcd .. &amp;amp;&amp;amp; rm -rf fontsInstall RubyRecommended using : rbenvGlobally : Install and configure rbenv brew install rbenv then add this 2 line to .zshrc or .bashrc export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;eval &quot;$(rbenv init -)&quot; Install ruby version 2.7.4 rbenv install 2.7.4 Set Global ruby version rbenv global 2.7.4 Install latest version of bundler gem install bundler:2.2.19 -n /usr/local/bin Under you project :Set local ruby versionrbenv local 2.7.4If you need to run bundle install you need to run instead this :bundle install --path vendor/bundleM1 SupportAdd the following to your .zshrcalias gem=&quot;arch -x86_64 sudo gem&quot;Please run the following scripts too !gem install --user-install ffi -- --enable-libffi-allocMore Options : using rvmInstall CocoaPods :sudo gem install cocoapods -n /usr/local/binM1 SupportAdd this to .zshrcalias pod=&quot;arch -arm64 pod&quot;Install Swift Package Manager (Recommended)No Need to install on macOS ! Don‚Äôt forget to check the SPM Aliases ! SPM Template (With SwiftUI) : swift5-module-template SPM Sample App (With StoryBoard) : SwiftExampleAppWithSPMInstall XCodeMany options to download Xcode you can use the followingRecommendedUsing : Xcodes# Install xcodesbrew install robotsandpencils/made/xcodes# list available xcode versionsxcodes list# Install XCodexcodes install 13 Beta 5Before running xcodes, export this environment variables :export XCODES_USERNAME=&quot;&quot;export XCODES_PASSWORD=&quot;&quot;Others : MAS Xcodes BigSure+ Downloader-for-Apple-Developers TroubleshootingInstall iOS Simulator :Install xcode-installsudo gem install xcode-installDisplay all simulators By namexcversion simulatorsInstall a Simulatorxcversion simulators --install=&quot;iOS 14.4 Simulator&quot;Display all availables devices and simulators ByIdsxcrun simctl listOutput Example :D9C60396-FC76-4693-AEE2-84AA7C8EB200 (active, disconnected) Watch: Apple Watch Series 6 - 44mm (FE1A98F8-C2F2-446D-B436-B484B1D87837) (Shutdown) Phone: iPhone 12 Pro Max (7395B23C-9AAE-4CEB-8FCC-82A70FCE0553) (Shutdown)Open Simualtor/Device ByIdI advice to add this alias to your config :alias sim=&quot;/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app/Contents/MacOS/Simulator -CurrentDeviceUDID&quot;Then just run :sim D9C60396-FC76-4693-AEE2-84AA7C8EB200(ex. From above the DeviceUDID is : D9C60396-FC76-4693-AEE2-84AA7C8EB200)To Open latest iOS Simulatoropen -a SimulatorInstall Java JDK :Using Jabba ‚ÄúJava Version Manager‚Äù (Recommanded)# Install Jabba echo $&#39;\\nnexport JABBA_VERSION=&quot;0.11.2&quot;\\n&#39; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrccurl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash &amp;amp;&amp;amp; . ~/.jabba/jabba.sh# Verify this line is in .zshrc (Should be added automatically)[ -s &quot;/Users/$(whoami)/.jabba/jabba.sh&quot; ] &amp;amp;&amp;amp; source &quot;/Users/$(whoami)/.jabba/jabba.sh&quot;# List available java versionsjabba ls-remote# Install JDK 16jabba install openjdk@1.16.0# Verify java versionjava -version## The result should be : # openjdk 16.0.1 2021-04-20# OpenJDK Runtime Environment (build 16.0.1+9-24)# OpenJDK 64-Bit Server VM (build 16.0.1+9-24, mixed mode, sharing)# Switch to a different Java version (need to first be installed using Jabba)jabba use ...# Don&#39;t forget to export JAVA_HOMEecho $&quot;\\nexport JAVA_HOME=/Users/$(whoami)/.jabba/jdk/openjdk@1.16.0/Contents/Home\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcecho $&quot;\\nexport PATH=$JAVA_HOME:$PATH\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcOld way :brew tap adoptopenjdk/openjdkbrew install --cask adoptopenjdk8echo $&quot;\\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/adoptopenjdk-8.jdk/Contents/Home/\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcecho $&quot;\\nexport PATH=$JAVA_HOME:$PATH\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcInstall Gradle## In my case latest version of gradle was : 7.3.3brew install gradleecho $&quot;\\nexport GRADLE_HOME=/usr/local/Cellar/gradle/7.3.3\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcecho $&quot;\\nexport PATH=$GRADLE_HOME/bin:$PATH\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcInstall Android Studio + SDK + NDKInstall Android studiobrew install --cask android-studioInstall Android SDK (sdkmanager, avdmanager, lint, retrace, screenshot2, apkanalyzer)## Since android-sdk is deprecatedbrew install --cask android-commandlinetools# Export some pathsecho $&quot;\\nexport ANDROID_HOME=`brew --prefix`/share/android-commandlinetools\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcecho $&quot;\\nexport PATH=$ANDROID_HOME:$PATH\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcecho $&quot;\\nexport SDK_MANAGER=`brew --prefix`/bin/sdkmanager\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcecho $&quot;\\nexport PATH=$SDK_MANAGER:$PATH\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcecho $&quot;\\nexport AVD=`brew --prefix`/bin/avdmanager\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcecho $&quot;\\nexport PATH=$AVD:$PATH\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrc# Then Install Toolssdkmanager &quot;patcher;v4&quot;sdkmanager &quot;build-tools;30.0.2&quot;sdkmanager &quot;platforms;android-32&quot;sdkmanager &quot;emulator&quot;sdkmanager &quot;tools&quot;sdkmanager &quot;platform-tools&quot;# Then Accept all licensesyes | sdkmanager --licensesMake sure also that in your Android project folder you have this in local.properties :sdk.dir=/usr/local/share/android-commandlinetoolsInstall Android NDKsdkmanager &quot;ndk-bundle&quot;Install (ADB, fastboot, sload_f2fs, dmtracedump, e2fsdroid, etc1tool, hprof-conv, make_f2fs, make_f2fs_casefold, mke2fs)brew install android-platform-toolsecho $&quot;\\nexport ADB=`brew --prefix`/bin/adb\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcecho $&quot;\\nexport PATH=$ADB:$PATH\\n&quot; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcMore Infos : SDKManagerInstall Android EmulatorGenyMotion (Recomended)brew install --cask genymotionUsefull ClI : genyshell gmtool## Copy this to .zshrcecho &#39;GMTOOL_PATH=&quot;/Applications/Genymotion.app/Contents/MacOS/&quot;&#39; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrcecho &#39;export PATH=$GMTOOL_PATH:$PATH&#39; &amp;gt;&amp;gt; /Users/$(whoami)/.zshrc## Display devices listgenyshell -c &quot;devices list&quot;## To Create / run u need licence !## Create a devicegmtool admin create &quot;Google Pixel - 9.0 - API 28 - 1080x1920&quot; GP_9## Run a devicegmtool admin run GP_9Android Emulator - Apple M1Download this emulator Apple M1Install Android File Transfer (Optionnal)brew install --cask android-file-transferInstall Vysor (Optionnal)brew install --cask vysorInstall Scrcpy (Recomended) (Vysor + Android File Transfer alternative)brew install scrcpyInstall Flutter## Install Flutterbrew install --cask flutter# Instal dartbrew tap dart-lang/dartbrew install dart## Migrate to null safety (Only inside a project)# dart migrate --apply-changes## Check That everythong is OKflutter doctorExtra Steps for Android usage in Flutterflutter config --android-sdk $ANDROID_HOMEsdkmanager --install &quot;cmdline-tools;latest&quot;# don&#39;t forget after each run of sdkmanager --install to run yes | sdkmanager --licensesApple M1 Support for Flutter &amp;amp; Dockersoftwareupdate --install-rosetta## Flutterarch -x86_64 sudo gem install ffiInstall DockerDownload this docker M1 image Docker Desktop Apple M1Install Fastlanebrew install fastlaneHere is a quick Tutorial on how to integrate Fastlane with TestFlight &amp;amp; AppCenter for Android/iOS/FlutterInstall VsCodebrew install --cask visual-studio-codeHow to use iTerm + PowerLvl10k in Vscode :(I assume here you already followed steps decribed in section Install ZSH)Edit this Vscode User Settings file /Users/$(whoami)/Library/Application\\ Support/Code/User/settings.json and add the following :{ ... &quot;terminal.external.osxExec&quot;: &quot;iTerm.app&quot;, &quot;terminal.integrated.shell.osx&quot;: &quot;/bin/zsh&quot;, &quot;terminal.integrated.fontFamily&quot;: &quot;&#39;MesloLGS NF&#39;&quot;, &quot;terminal.integrated.cursorStyle&quot;: &quot;line&quot;, &quot;terminal.integrated.lineHeight&quot;: 1.3}If for some reason you want to edit those colors you can add this and play a little bit with values :{ ... &quot;workbench.colorCustomizations&quot;: { &quot;terminal.background&quot;:&quot;#131212&quot;, &quot;terminal.foreground&quot;:&quot;#6bb8e6&quot;, &quot;terminal.ansiBlack&quot;:&quot;#000000&quot;, &quot;terminal.ansiBrightBlack&quot;:&quot;#414141&quot;, &quot;terminal.ansiBlue&quot;: &quot;#bceafa&quot;, &quot;terminal.ansiBrightBlue&quot;:&quot;#77dcff&quot;, &quot;terminal.ansiCyan&quot;:&quot;#a3e9d4&quot;, &quot;terminal.ansiBrightCyan&quot;:&quot;#a3e9d5&quot;, &quot;terminal.ansiGreen&quot;:&quot;#68f400&quot;, &quot;terminal.ansiBrightGreen&quot;:&quot;#dcf152&quot;, &quot;terminal.ansiMagenta&quot;:&quot;#f58a8d&quot;, &quot;terminal.ansiBrightMagenta&quot;:&quot;#ffb4b8&quot;, &quot;terminal.ansiRed&quot;:&quot;#ff4c41&quot;, &quot;terminal.ansiBrightRed&quot;:&quot;#ff7c77&quot;, &quot;terminal.ansiWhite&quot;:&quot;#ffffff&quot;, &quot;terminal.ansiBrightWhite&quot;:&quot;#ffffff&quot;, &quot;terminal.ansiYellow&quot;:&quot;#ffe100&quot;, &quot;terminal.ansiBrightYellow&quot;:&quot;#fff68b&quot;, }}Install some macOS developer ToolsOpenInTerminalbrew install --cask openinterminalSpectaclebrew install --cask spectacleDozerbrew install --cask dozerDB Browser for SQLitebrew install --cask db-browser-for-sqliteProxymanbrew install --cask proxymanPostManbrew install --cask postmanInstall Browser Plugins :Chrome Octotree User Agent Switcher DarkReader Session ManagerTroubleShoots :Install Rosetta 2softwareupdate --install-rosettaYou‚Äôre good to go !" } ]
